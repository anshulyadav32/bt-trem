import 'package:hive_flutter/hive_flutter.dart';
import '../models/message.dart';

class LocalStorageService {
  static const String messagesBoxName = 'messages';
  static const String preferencesBoxName = 'preferences';
  
  Future<void> init() async {
    // Initialize Hive with Flutter
    await Hive.initFlutter();
    
    // Register adapters - these should be available after running build_runner
    if (!Hive.isAdapterRegistered(0)) {
      // The adapters should be generated by build_runner
      // If you encounter errors here, ensure you've run:
      // flutter pub run build_runner build
      try {
        Hive.registerAdapter(MessageAdapter());
        Hive.registerAdapter(MessageStatusAdapter());
      } catch (e) {
        print('Error registering Hive adapters: $e');
        // Continue without local storage in case of error
      }
    }
    
    // Open boxes
    try {
      await Hive.openBox<Message>(messagesBoxName);
      await Hive.openBox(preferencesBoxName);
    } catch (e) {
      print('Error opening Hive boxes: $e');
      // Try to recover by deleting corrupted boxes
      await Hive.deleteBoxFromDisk(messagesBoxName);
      await Hive.deleteBoxFromDisk(preferencesBoxName);
      
      // Try opening again
      await Hive.openBox<Message>(messagesBoxName);
      await Hive.openBox(preferencesBoxName);
    }
  }
  
  // Message storage methods
  Future<void> saveMessage(Message message) async {
    try {
      final box = Hive.box<Message>(messagesBoxName);
      await box.put(message.id, message);
    } catch (e) {
      print('Error saving message to local storage: $e');
      // Continue without local storage in case of error
    }
  }
  
  Future<void> deleteMessage(String messageId) async {
    try {
      final box = Hive.box<Message>(messagesBoxName);
      await box.delete(messageId);
    } catch (e) {
      print('Error deleting message from local storage: $e');
    }
  }
  
  List<Message> getMessages() {
    try {
      final box = Hive.box<Message>(messagesBoxName);
      return box.values.toList();
    } catch (e) {
      print('Error getting messages from local storage: $e');
      return [];
    }
  }
  
  Future<void> clearMessages() async {
    try {
      final box = Hive.box<Message>(messagesBoxName);
      await box.clear();
    } catch (e) {
      print('Error clearing messages from local storage: $e');
    }
  }
  
  // Preference storage methods
  Future<void> savePreference(String key, dynamic value) async {
    try {
      final box = Hive.box(preferencesBoxName);
      await box.put(key, value);
    } catch (e) {
      print('Error saving preference to local storage: $e');
    }
  }
  
  dynamic getPreference(String key, dynamic defaultValue) {
    try {
      final box = Hive.box(preferencesBoxName);
      return box.get(key, defaultValue: defaultValue);
    } catch (e) {
      print('Error getting preference from local storage: $e');
      return defaultValue;
    }
  }
}
